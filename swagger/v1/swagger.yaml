---
openapi: 3.0.1
info:
  title: API
  version: '1'
components:
  schemas:
    Game:
      type: object
      properties:
        id:
          type: integer
          example: 982478387
          description: Used for joinnin the game.
        current_turn:
          type: integer
          example: 0
          description: The current move in the order.
        players_turn:
          type: integer
          example: 1
          description: An ordinal ID of the player in the array of players. (This
            is different than player's id field).
        game_state:
          type: string
          example: in_lobby
          description: 'One of the three main game states: in_lobby, players_turn,
            game_ended.'
        winning_score:
          anyOf:
          - type: integer
            example: 250
          - type: 'null'
          description: Score that is nessesary to get to win the game.
        winners:
          type: array
          items:
            type: integer
          description: Array of player's ordinal IDs who have met winning criteria.
        field:
          type: array
          items:
            type: string
          description: This is the game field where letters are supposed to go, consisting
            of 225 initially blank tiles.
        letter_bag:
          anyOf:
          - type: array
            items:
              type: string
          - type: 'null'
          description: Array of letters from which players draw their hands.
        language:
          anyOf:
          - type: string
          - type: 'null'
          description: Language of letters that players use to play.
        hand_size:
          anyOf:
          - type: integer
          - type: 'null'
          description: The number of letters each player draw.
        players:
          type: array
          items:
            "$ref": "#/components/schemas/Player"
          description: The array of players
    Player:
      type: object
      properties:
        id:
          type: integer
          example: 12
          description: Unique player id. Don't have much use for now.
        nickname:
          type: string
          example: Biba
          description: No uniqueness is required.
        score:
          type: integer
          example: 0
          description: The personal score of the player.
        active_player:
          type: boolean
          example: true
          description: The flag that signifies whether the player is in game or has
            left it.
        want_to_end:
          type: boolean
          example: false
          description: The flag that signifies if the player wants to finish the game.
        hand:
          type: array
          items:
            type: string
            example: ''
          description: Letters that player are 'holding'.
  securitySchemes:
    JWT:
      name: Authorization
      in: header
paths:
  "/api/v1/new_game":
    post:
      summary: Creates a new game and adds a player to it.
      tags:
      - Gameplay
      parameters: []
      responses:
        '201':
          description: successful
          headers:
            Token:
              type: string
              description: Player's personal token
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: Biba
              required:
              - nickname
  "/api/v1/join_game/{game_id}":
    parameters:
    - name: game_id
      in: path
      description: Game id
      required: true
      schema:
        type: string
    post:
      summary: Connects a new player to the game lobby.
      tags:
      - Gameplay
      parameters: []
      responses:
        '200':
          description: successful
          headers:
            Token:
              type: string
              description: Player's personal token
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: Biba
              required:
              - nickname
  "/api/v1/start_game":
    post:
      summary: "Changes the game state, sets the winning score, fills up the letter
        bag, \n    then player's hands and sets other initial fields."
      tags:
      - Gameplay
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  example: rus
                  description: Only russian for now.
                hand_size:
                  type: integer
                  example: '8'
                  description: Default for russian is 7.
                winning_score:
                  type: integer
                  example: '120'
                  description: Default is 150.
              required:
              - language
  "/api/v1/submit_turn":
    post:
      summary: "Validates submitted  data, updates the game field, refills the player's
        hand, \n    and calculates the score. Passes the turn."
      tags:
      - Gameplay
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                positions:
                  type: array
                  items:
                    type: integer
                  example:
                  - 112
                  - 113
                  - 114
                letters:
                  type: array
                  items:
                    type: string
                  example:
                  - с
                  - о
                  - н
                hand:
                  type: array
                  items:
                    type: string
                  example:
                  - з
                  - й
                  - ь
                  - щ
              required:
              - positions
              - letters
              - hand
  "/api/v1/exchange":
    post:
      summary: "Returns letters for exchange to the letter bag and draws new ones
        as replacement. \n    Passes the turn."
      tags:
      - Gameplay
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                exchange_letters:
                  type: array
                  items:
                    type: string
                  example:
                  - т
                  - т
                  - ш
                hand:
                  type: array
                  items:
                    type: string
                  example:
                  - з
                  - й
                  - ь
                  - щ
              required:
              - exchange_letters
              - hand
  "/api/v1/suggest_finishing":
    post:
      summary: "Sets player's 'want_to_end' flag to true. \n    As soon as all players
        'want to end', game ends prematurely."
      tags:
      - Gameplay
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
  "/api/v1/leave_game":
    post:
      summary: "Sets player's 'active_player' flag to false. An inactive player skips
        his turns. \n    When there are no active players, the game is deleted."
      tags:
      - Gameplay
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: string
                    example: Player left the game!
  "/api/v1/skip_turn":
    post:
      summary: Passes the turn.
      tags:
      - Optional
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
  "/api/v1/spelling_check":
    post:
      summary: Checks if the specified word is present in the dictionary.
      tags:
      - Optional
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  correct_spelling:
                    type: boolean
                    example: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                  example: слово
              required:
              - word
  "/api/v1/show":
    get:
      summary: Deprecated, use status instead.
      tags:
      - Usefull
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
  "/api/v1/status":
    get:
      summary: Displays the full current game state.
      tags:
      - Usefull
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    "$ref": "#/components/schemas/Game"
  "/api/v1/quick_status":
    get:
      summary: Displays the minimalistic game status.
      tags:
      - Usefull
      security:
      - JWT: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                properties:
                  game:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 982478387
                      players_turn:
                        type: integer
                        example: 1
                      game_state:
                        type: string
                        example: in_lobby
                      players:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 12
                            active_player:
                              type: boolean
                              example: true
                            want_to_end:
                              type: boolean
                              example: false
servers:
- url: https://scrabbles.xyz
